<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <title>Admin portal</title>
    <link rel='stylesheet' href='/stylesheets/admin.css'/>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous">
</head>
<body class="d-flex vh-100 flex-column">
<%- include("../partial/navbar.ejs") %>

<h1 class="w-100 text-center mt-3 mb-3">Admin Portal</h1>
<div class="container btn-group" role="group" aria-label="tab">
    <button type="button" class="btn btn-primary" onclick="setTab(0)">Orders</button>
    <button type="button" class="btn btn-primary" onclick="setTab(1)">Payments</button>
    <button type="button" class="btn btn-primary" onclick="setTab(2)">Items</button>
    <button type="button" class="btn btn-primary" onclick="setTab(3)">Tags</button>
    <button type="button" class="btn btn-primary" onclick="setTab(4)">Users</button>
    <button type="button" class="btn btn-primary" onclick="setTab(5)">Requests</button>
</div>
<hr>
<div class="flex-fill tabs d-none">
    <div class="container d-flex">
        <select class="form-select me-3 w-100" id="order-status-select" aria-label="Status select">
            <option value="" selected>All</option>
            <option value="closed">Closed</option>
            <option value="open">Open</option>
        </select>
        <button class="btn btn-outline-primary" onclick="fetchOrders()">Refresh</button>
    </div>

    <div class="container d-flex flex-column">
        <div class="table-responsive mt-3">
            <table class="table table-striped mw-100 table-hover" id="orders-list">
                <thead>
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col" class="text-center">Table Number</th>
                    <th scope="col" class="text-center">Customer ID</th>
                    <th scope="col" class="text-center">Status</th>
                    <th scope="col" class="text-center">Ordered At</th>
                    <th scope="col" class="text-end">Actions</th>
                </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

    </div>

    <script type="module">
        let orders;

        window.fetchOrders = fetchOrders;

        async function fetchOrders() {
            const statusSelect = document.getElementById('order-status-select');
            const status = statusSelect.value;
            const response = await fetch(`/api/orders?status=${status}`);
            if (!response.ok) {
                console.error('Failed to fetch orders:', response.statusText);
                return;
            }
            orders = await response.json();
            const ordersList = document.getElementById('orders-list');

            ordersList.querySelector('tbody').innerHTML = '';
            orders.forEach(order => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${order.id}</td>
                    <td class="text-center">${order.table_number}</td>
                    <td class="text-center">${order.customer_id}</td>
                    <td class="text-center">${order.status}</td>
                    <td class="text-center">${new Date(order.ordered_at).toString().split('GMT')[0]}</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-secondary" onclick="window.location.href='/orders/${order.id}'">Open</button>
                    </td>
                `;
                ordersList.querySelector('tbody').appendChild(row);
            });
        }

        document.addEventListener('DOMContentLoaded', fetchOrders);
    </script>
</div>
<div class="flex-fill tabs d-none">
    <div class="container d-flex">
        <select class="form-select me-3 w-100" id="payment-status-select" aria-label="Status select">
            <option value="" selected>All</option>
            <option value="processing">Processing</option>
            <option value="completed">Completed</option>
        </select>
        <button class="btn btn-outline-primary" onclick="fetchPayments()">Refresh</button>
    </div>

    <div class="container d-flex flex-column">
        <div class="table-responsive mt-3">
            <table class="table table-striped mw-100 table-hover" id="payment-list">
                <thead>
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col" class="text-center">Order ID</th>
                    <th scope="col" class="text-center">Amount</th>
                    <th scope="col" class="text-center">Status</th>
                    <th scope="col" class="text-end">Actions</th>
                </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>

    <script type="module">
        let payments;

        window.fetchPayments = fetchPayments;

        async function fetchPayments() {
            const statusSelect = document.getElementById('payment-status-select');
            const status = statusSelect.value;
            const response = await fetch(`/api/payments?status=${status}`);
            if (!response.ok) {
                console.error('Failed to fetch payments:', response.statusText);
                return;
            }
            payments = await response.json();
            const paymentList = document.getElementById('payment-list');

            paymentList.querySelector('tbody').innerHTML = '';
            payments.forEach(payment => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${payment.id}</td>
                    <td class="text-center">${payment.order_id}</td>
                    <td class="text-center">$${parseFloat(payment.total).toFixed(2)}</td>
                    <td class="text-center">${payment.status}</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-secondary" onclick="window.location.href='/payments/${payment.id}'">Open</button>
                    </td>
                `;
                paymentList.querySelector('tbody').appendChild(row);
            });
        }

        document.addEventListener('DOMContentLoaded', fetchPayments);
    </script>
</div>
<div class="flex-fill tabs d-none">
    <div>
        <div class="container">
            <button type="button" class="btn btn-success w-100 mb-3" onclick="createItem()">Create Item</button>
        </div>
        <div class="container d-flex mb-3">
            <input type="text" id="item-search" class="flex-fill form-control me-3" placeholder="Search Items"
                   aria-label="Item Search">
            <button class="btn btn-outline-primary" onclick="searchItems()">Search</button>
        </div>
        <div class="container d-flex w-100 flex-wrap" id="tagButtons"></div>
        <div class="container d-flex flex-column">
            <div class="table-responsive mt-3">
                <table class="table table-striped mw-100 table-hover" id="item-list">
                    <thead>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col" class="text-center">Name</th>
                        <th scope="col" class="text-center">Image</th>
                        <th scope="col" class="text-center">Descriptions</th>
                        <th scope="col" class="text-center">Tags</th>
                        <th scope="col" class="text-center">Price</th>
                        <th scope="col" class="text-end">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="modal" id="edit-item-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="edit-item-name" placeholder="Name">
                        <label for="edit-item-name" class="form-label">Name</label>
                    </div>
                    <div class="form-floating">
                        <input type="email" class="form-control mt-2" id="edit-item-image" placeholder="Image">
                        <label for="edit-item-image" class="form-label">Image URL</label>
                    </div>
                    <div class="form-floating">
                        <input type="text" class="form-control mt-2" id="edit-item-description"
                               placeholder="Description">
                        <label for="edit-item-description" class="form-label">Description</label>
                    </div>
                    <div class="form-floating">
                        <input type="number" class="form-control mt-2" id="edit-item-price" placeholder="Price" min="0">
                        <label for="edit-item-price" class="form-label">Price</label>
                    </div>
                    <label for="edit-item-available">Available: </label>
                    <input type="checkbox" class="form-check-inline mt-3" id="edit-item-available" checked>
                    <div class="mt-3" id="edit-item-tags"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="save-item-button">Save changes</button>
                </div>
            </div>
        </div>
    </div>


    <script type="module">
        let items;
        window.addEventListener("DOMContentLoaded", () => {
            const tagButtons = document.getElementById('tagButtons');
            fetch('/api/tags')
                .then(response => response.json())
                .then(tags => {
                    tags.forEach(tag => {
                        const button = document.createElement('button');
                        button.className = 'btn btn-secondary me-2 mb-2';
                        button.textContent = tag.name;
                        button.onclick = () => filterByTag(tag.name);
                        tagButtons.appendChild(button);
                    });
                })
                .catch(error => console.error('Error fetching tags:', error));
        });

        window.addEventListener('DOMContentLoaded', searchItems);

        let tagFilters;

        function filterByTag(tagId) {
            if (!tagFilters) {
                tagFilters = new Set();
            }
            if (tagFilters.has(tagId)) {
                tagFilters.delete(tagId);
            } else {
                tagFilters.add(tagId);
            }
            // Update the button styles
            const buttons = document.querySelectorAll('#tagButtons button');
            buttons.forEach(button => {
                const tagId = button.textContent; // Assuming button text is the tag name
                if (tagFilters.has(tagId)) {
                    button.classList.add('btn-primary');
                    button.classList.remove('btn-secondary');
                } else {
                    button.classList.add('btn-secondary');
                    button.classList.remove('btn-primary');
                }
            });
        }

        window.searchItems = searchItems;

        window.editItem = editItem;

        window.createItem = createItem;

        async function searchItems() {
            const searchInput = document.getElementById('item-search');
            const searchTerm = searchInput.value.trim();
            let url = `/api/items?search=${encodeURIComponent(searchTerm)}&isAvailable=all`;

            if (tagFilters && tagFilters.size > 0) {
                url += `&tags=${Array.from(tagFilters).map(tag => encodeURIComponent(tag)).join(',')}`;
            }

            const response = await fetch(url);
            if (!response.ok) {
                console.error('Failed to fetch items:', response.statusText);
                return;
            }

            items = await response.json();
            const itemList = document.getElementById('item-list');

            itemList.querySelector('tbody').innerHTML = '';
            items.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.id}</td>
                    <td class="text-center">${item.name}</td>
                    <td class="text-center"><img src="${item.image_url}" alt="${item.name}" class="img-thumbnail" style="max-width: 100px;"></td>
                    <td class="text-center">${item.description}</td>
                    <td class="text-center">${item.tags.join(', ')}</td>
                    <td class="text-center">$${parseFloat(item.price)}</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-secondary" onclick="editItem(${item.id})">Edit Item</button>
                    </td>
                `;
                itemList.querySelector('tbody').appendChild(row);
            });
        }

        async function editItem(id) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('edit-item-modal')) || new bootstrap.Modal(document.getElementById('edit-item-modal'));
            const nameInput = document.getElementById('edit-item-name');
            const imageInput = document.getElementById('edit-item-image');
            const descriptionInput = document.getElementById('edit-item-description');
            const tagsContainer = document.getElementById('edit-item-tags');
            const priceInput = document.getElementById('edit-item-price');
            const availableInput = document.getElementById('edit-item-available');

            const item = items.find(i => i.id === id);

            if (!item) {
                console.error('Item not found:', id);
                return;
            }

            nameInput.value = item.name;
            imageInput.value = item.image_url;
            descriptionInput.value = item.description;
            priceInput.value = parseFloat(item.price);
            tagsContainer.innerHTML = '';
            availableInput.checked = item.is_available === 1;
            console.log(item);
            tags.forEach(tag => {
                const button = document.createElement('button');
                button.className = 'btn me-2 mb-2';
                button.textContent = tag.name;
                button.onclick = () => {
                    if (item.tags.includes(tag.name)) {
                        item.tags = item.tags.filter(t => t !== tag.name);
                        button.classList.remove('btn-primary');
                        button.classList.add('btn-secondary');
                    } else {
                        item.tags.push(tag.name);
                        button.classList.add('btn-primary');
                        button.classList.remove('btn-secondary');
                    }
                };

                if (item.tags.includes(tag.name)) {
                    button.classList.add('btn-primary');
                } else {
                    button.classList.add('btn-secondary');
                }

                tagsContainer.appendChild(button);
            });

            const saveButton = document.getElementById("save-item-button");

            saveButton.disabled = false;
            saveButton.onclick = async () => {
                const updatedItem = {
                    id: item.id,
                    name: nameInput.value.trim(),
                    image_url: imageInput.value.trim(),
                    description: descriptionInput.value.trim(),
                    price: parseFloat(priceInput.value) || 0,
                    tags: item.tags,
                    isAvailable: availableInput.checked,
                };

                const response = await fetch(`/api/items/${item.id}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedItem)
                });
                modal.hide();
                if (response.ok) {
                    await searchItems();
                } else {
                    const error = await response.json();
                    if (error) {
                        alert(`Error updating item: ${JSON.stringify(error)}`);
                    } else {
                        alert('Error updating item: Unknown error');
                    }
                }
            };

            modal.show();
        }

        async function createItem() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('edit-item-modal')) || new bootstrap.Modal(document.getElementById('edit-item-modal'));
            const nameInput = document.getElementById('edit-item-name');
            const imageInput = document.getElementById('edit-item-image');
            const descriptionInput = document.getElementById('edit-item-description');
            const tagsContainer = document.getElementById('edit-item-tags');
            const priceInput = document.getElementById('edit-item-price');
            const availableInput = document.getElementById('edit-item-available');

            const heading = document.querySelector('#edit-item-modal .modal-title');

            heading.textContent = 'Create Item';

            nameInput.value = "";
            imageInput.value = "";
            descriptionInput.value = "";
            priceInput.value = 0;
            tagsContainer.innerHTML = '';
            availableInput.checked = true;
            let selectedTags = tags.filter(_ => true); // idk if it passes array by ref or value
            tags.forEach(tag => {
                const button = document.createElement('button');
                button.className = 'btn me-2 mb-2';
                button.textContent = tag.name;
                button.onclick = () => {
                    if (selectedTags.includes(tag.name)) {
                        selectedTags = selectedTags.filter(t => t !== tag.name);
                        button.classList.remove('btn-primary');
                        button.classList.add('btn-secondary');
                    } else {
                        selectedTags.push(tag.name);
                        button.classList.add('btn-primary');
                        button.classList.remove('btn-secondary');
                    }
                };

                if (selectedTags.includes(tag.name)) {
                    button.classList.add('btn-primary');
                } else {
                    button.classList.add('btn-secondary');
                }

                tagsContainer.appendChild(button);
            });

            const saveButton = document.getElementById("save-item-button");

            saveButton.onclick = async () => {
                saveButton.disabled = true;
                const updatedItem = {
                    name: nameInput.value.trim(),
                    imageUrl: imageInput.value.trim(),
                    description: descriptionInput.value.trim(),
                    tags: selectedTags.filter(t => typeof t === 'string'),
                    price: parseFloat(priceInput.value) || 0
                };

                const response = await fetch(`/api/items/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedItem)
                });
                modal.hide();
                if (response.ok) {
                    await searchItems();
                    alert('Item created successfully!');
                } else {
                    const error = await response.json();
                    if (error) {
                        alert(`Error creating item: ${JSON.stringify(error)}`);
                    } else {
                        alert('Error creating item: Unknown error');
                    }
                }
            };

            saveButton.disabled = false;
            modal.show();
        }

    </script>

</div>
<div class="flex-fill tabs d-none">
    <div class="container d-flex flex-column">
        <button type="button" class="btn btn-success" onclick="createTag()">Create Tag</button>
        <div class="table-responsive mt-3">
            <table class="table table-striped mw-100 table-hover" id="tag-list">
                <thead>
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col" class="text-center">Name</th>
                    <th scope="col" class="text-end">Actions</th>
                </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
    <div class="modal" id="edit-tag-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Tag</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" id="edit-tag-name" placeholder="Name">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let tags;

        async function fetchTags() {
            const response = await fetch('/api/tags');
            if (!response.ok) {
                console.error('Failed to fetch tags:', response.statusText);
                return;
            }
            tags = await response.json();
            const tagList = document.getElementById('tag-list');

            tagList.querySelector('tbody').innerHTML = '';
            tags.forEach(tag => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${tag.id}</td>
                    <td class="text-center">${tag.name}</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-secondary" onclick="editTag(${tag.id})">Edit Tag</button>
                    </td>
                `;
                tagList.querySelector('tbody').appendChild(row);
            });
        }

        window.editTag = editTag;

        async function editTag(id) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('edit-tag-modal')) || new bootstrap.Modal(document.getElementById('edit-tag-modal'));
            const nameInput = document.getElementById('edit-tag-name');

            const tag = tags.find(t => t.id === id);

            nameInput.value = tag.name;

            const saveButton = document.querySelector('#edit-tag-modal .btn-primary');
            saveButton.onclick = async () => {
                const updatedTag = {
                    name: nameInput.value.trim()
                };

                const updateResponse = await fetch(`/api/tags/${id}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedTag)
                });

                if (updateResponse.ok) {
                    await fetchTags();
                    modal.hide();
                } else {
                    console.error('Failed to update tag:', updateResponse.statusText);
                }
            };
            modal.show();
        }

        window.createTag = createTag;

        async function createTag() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('edit-tag-modal')) || new bootstrap.Modal(document.getElementById('edit-tag-modal'));
            const nameInput = document.getElementById('edit-tag-name');

            nameInput.value = '';
            nameInput.placeholder = 'Enter tag name';

            const saveButton = document.querySelector('#edit-tag-modal .btn-primary');
            saveButton.onclick = async () => {
                const newTag = {
                    name: nameInput.value.trim()
                };

                const createResponse = await fetch('/api/tags', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newTag)
                });

                if (createResponse.ok) {
                    await fetchTags();
                    modal.hide();
                } else {
                    console.error('Failed to create tag:', createResponse.statusText);
                }
            };
            modal.show();
        }

        document.addEventListener('DOMContentLoaded', fetchTags);
    </script>
</div>

<div class="flex-fill tabs d-none">
    <div>
        <div class="container d-flex">
            <select class="form-select me-3 w-25" id="user-role-select" aria-label="Role select">
                <option value="" selected>All</option>
                <option value="customer">Customer</option>
                <option value="chef">Chef</option>
                <option value="admin">Admin</option>
            </select>
            <input type="text" id="user-search" class="flex-fill form-control me-3" placeholder="Search Users"
                   aria-label="User Search">
            <button class="btn btn-outline-primary" onclick="searchUsers()">Search</button>
        </div>
        <div class="container d-flex flex-column">
            <div class="table-responsive mt-3">
                <table class="table table-striped mw-100 table-hover" id="user-list">
                    <thead>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col" class="text-center">Name</th>
                        <th scope="col" class="text-center">Email</th>
                        <th scope="col" class="text-center">Role</th>
                        <th scope="col" class="text-end">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="modal" id="edit-user-modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit user</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control" id="edit-user-name" placeholder="Name">
                    <input type="email" class="form-control mt-2" id="edit-user-email" placeholder="Email">
                    <select class="form-select mt-2" id="edit-user-role" aria-label="Role select">
                        <option value="customer">Customer</option>
                        <option value="chef">Chef</option>
                        <option value="admin">Admin</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <script type="module">
        window.searchUsers = searchUsers;

        window.addEventListener('DOMContentLoaded', searchUsers);
        let searchUserResult;

        async function searchUsers() {
            const searchInput = document.getElementById('user-search');
            const roleSelect = document.getElementById('user-role-select');
            const searchTerm = searchInput.value.trim();
            let role = roleSelect.value;

            const response = await fetch(`/api/users?search=${encodeURIComponent(searchTerm)}&role=${role}`);
            if (!response.ok) {
                console.error('Failed to fetch users:', response.statusText);
                return;
            }

            const users = await response.json();
            searchUserResult = users;
            const userList = document.getElementById('user-list');

            userList.querySelector('tbody').innerHTML = '';
            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.id}</td>
                    <td class="text-center">${user.name}</td>
                    <td class="text-center">${user.email}</td>
                    <td class="text-center">${user.role}</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-secondary" onclick="editUser(${user.id})">Edit User</button>
                    </td>
                `;
                userList.querySelector('tbody').appendChild(row);
            });
        }

        window.editUser = editUser;

        async function editUser(id) {
            const modal = bootstrap.Modal.getInstance(document.getElementById('edit-user-modal')) || new bootstrap.Modal(document.getElementById('edit-user-modal'));
            const nameInput = document.getElementById('edit-user-name');
            const emailInput = document.getElementById('edit-user-email');
            const roleSelect = document.getElementById('edit-user-role');
            const passInput = document.getElementById('edit-user-pass');

            const user = searchUserResult.find(u => u.id === id);

            if (!user) {
                console.error('User not found:', id);
                return;
            }

            nameInput.value = user.name;
            emailInput.value = user.email;
            roleSelect.value = user.role;
            passInput.value = '';
            passInput.placeholder = 'Leave empty to keep current password';

            const saveButton = document.querySelector('#edit-user-modal .btn-primary');
            saveButton.onclick = async () => {
                const updatedUser = {
                    id: user.id,
                    name: nameInput.value.trim(),
                    email: emailInput.value.trim(),
                    role: roleSelect.value,
                };

                if (passInput.value.trim()) {
                    updatedUser.password = passInput.value.trim();
                }

                const response = await fetch(`/api/users/${user.id}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedUser)
                });

                if (response.ok) {
                    await searchUsers();
                    modal.hide();
                } else {
                    console.error('Failed to update user:', response.statusText);
                }
            };
            modal.show();
        }
    </script>
</div>
<div class="flex-fill tabs d-none">
    <div>
        <div class="container d-flex">
            <select class="form-select me-3 w-25" id="request-status-select" aria-label="Status select"
                    onchange="searchRequests()">
                <option value="" selected>All</option>
                <option value="customer">Pending</option>
                <option value="chef">Rejected</option>
                <option value="admin">Granted</option>
            </select>
        </div>
        <div class="container d-flex flex-column">
            <div class="table-responsive mt-3">
                <table class="table table-striped mw-100 table-hover" id="request-list">
                    <thead>
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col" class="text-center">Username</th>
                        <th scope="col" class="text-center">Email</th>
                        <th scope="col" class="text-center">Status</th>
                        <th scope="col" class="text-center">Role requested</th>
                        <th scope="col" class="text-center">Granted by</th>
                        <th scope="col" class="text-end">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <script type="module">
        window.searchRequests = searchRequests;

        await searchRequests();

        async function searchRequests() {
            const statusSelect = document.getElementById('request-status-select');
            const status = statusSelect.value;

            const response = await fetch(`/api/requests?status=${status}`);
            if (!response.ok) {
                const errorData = await response.json();
                alert('Failed to fetch requests: ' + errorData.error);
                return;
            }

            const requests = await response.json();
            const requestList = document.getElementById('request-list');

            requestList.querySelector('tbody').innerHTML = '';
            requests.forEach(request => {
                const row = document.createElement('tr');
                let innerHTML = `
                    <td>${request.id}</td>
                    <td class="text-center">${request.user_name}</td>
                    <td class="text-center">${request.user_email}</td>
                    <td class="text-center">${request.status}</td>
                    <td class="text-center">${request.role}</td>
                    <td class="text-center">${request.granted_by || 'N/A'}</td>
                    <td class="text-end">`;
                if (request.status === 'pending') {
                    innerHTML += `
                        <button class="btn btn-success" onclick="handleRequest(${request.id}, 'granted')">Grant</button>
                        <button class="btn btn-danger" onclick="handleRequest(${request.id}, 'rejected')">Reject</button>`;
                }
                innerHTML += `</td>`;
                row.innerHTML = innerHTML;
                requestList.querySelector('tbody').appendChild(row);
            });
        }

        window.handleRequest = handleRequest;

        async function handleRequest(id, status) {
            const response = await fetch(`/api/requests/${id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({status})
            });

            if (response.ok) {
                await searchRequests();
            } else {
                const errorData = await response.json();
                alert('Failed to update request: ' + errorData.error);
            }
        }
    </script>
</div>
<script type="module">
    let currentTab = parseInt(localStorage.getItem('currentTab') || 0);
    const tabButtons = document.querySelectorAll('.btn-group button');

    tabButtons[currentTab].classList.toggle('active');

    const tabs = document.querySelectorAll(".tabs");
    tabs[currentTab].classList.toggle('d-none');

    function setTab(index) {
        if (currentTab === index) return;

        tabButtons[currentTab].classList.toggle('active');
        tabs[currentTab].classList.toggle('d-none');
        currentTab = index;
        localStorage.setItem('currentTab', currentTab);
        tabButtons[currentTab].classList.toggle('active');
        tabs[currentTab].classList.toggle('d-none');
    }

    window.setTab = setTab;
</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO"
        crossorigin="anonymous"></script>
</body>
</html>
