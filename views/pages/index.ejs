<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
    <title>FOS</title>
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous">
</head>
<body class="d-flex flex-column vh-100">
<%- include("../partial/navbar.ejs") %>
<div class="container d-flex flex-column flex-fill justify-content-center">
    <div class="container p-4 rounded-3 bg-body-tertiary justify-content-center align-content-center border shadow">
        <h1 class="text-center mb-3"> Welcome to FOS </h1>
        <div class="container">
            <form class="form-floating">
                <input type="number" min="1" max="100" step="1" class="form-control mb-3" id="tableNumber" required/>
                <label for="tableNumber">
                    Table Number
                </label>
                <button type="button" class="btn btn-primary w-100" onclick="createOrder()"> Start Ordering</button>
            </form>
            <hr class="">
            <button class="btn btn-primary w-100" onclick="previousOrders()"> Previous Orders </button>
        </div>
    </div>
</div>


<div class="modal" id="notification-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Notifications</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h1 class="text-center"> You have <code><%- unread.length %></code> unread notifications</code></h1>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="viewNotifications()">View</button>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="notification-view-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Notifications</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO"
        crossorigin="anonymous"></script>
<script>
    <% if (unread.length > 0) { %>
    const notificationModal = bootstrap.Modal.getInstance(document.getElementById("notification-modal")) || new bootstrap.Modal(document.getElementById('notification-modal'));
    notificationModal.show();
    <% } %>
    async function viewNotifications() {
        const notificationModal = bootstrap.Modal.getInstance(document.getElementById("notification-modal"));
        notificationModal.hide();
        const viewModal = bootstrap.Modal.getInstance(document.getElementById('notification-view-modal')) || new bootstrap.Modal(document.getElementById('notification-view-modal'));
        const modalBody = document.querySelector('#notification-view-modal .modal-body');
        modalBody.innerHTML = ''; // Clear previous content
        <% for (let i = 0; i < unread.length; i++) { %>
        modalBody.innerHTML += `--> Your request to change role to <code><%- unread[i].role %></code> has been <code><%- unread[i].status %></code>`;
        <% } %>
        viewModal.show();
        const response = await fetch('/read', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
        });

        if (!response.ok) {
            console.error('Failed to mark notifications as read');
        } else {
            console.log('Notifications marked as read');
        }
    }
    async function createOrder() {
        const tableNumber = document.getElementById('tableNumber').value;
        if (tableNumber) {
            if (tableNumber < 1 || tableNumber > 100) {
                alert('Table number must be between 1 and 100.');
                return;
            }
            console.log(`Creating order for table number: ${tableNumber}`);
            const result = await fetch("/api/orders", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({tableNumber})
            });
            if (result.ok) {
                const data = await result.json();
                console.log('Order created successfully:', data);
                window.location.href = `/orders/${data.orderId}`;
            } else {
                const errorData = await result.json();
                console.error('Order creation failed:', errorData);
                alert('Order creation failed: ' + errorData.error);
            }
        } else {
            alert('Please enter a table number.');
        }
    }

    function previousOrders() {
        window.location.href = '/orders';
    }
</script>
</body>
</html>
